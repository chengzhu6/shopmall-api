package com.castellan.dao;

import com.castellan.pojo.User;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

@Mapper
public interface UserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user
     *
     * @mbggenerated
     */
    int insert(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user
     *
     * @mbggenerated
     */
    User selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user
     *
     * @mbggenerated
     */
    List<User> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(User record);

    /**
     * 检查用户名是否存在
     * @param username
     * @return
     */
    int checkUsername(String username);


    /**
     * 根据用户名和密码从数据库中获取到一个user
     * @param username
     * @param password
     * @return
     */
    User selectLogin(@Param("username") String username, @Param("password") String password);

    /**
     * 检查邮箱是否存在
     * @param email
     * @return
     */
    int checkEmail(String email);

    /**
     * 根据用户名获取用户设置的问题
     * @param username
     * @return
     */
    String selectQuestionByUsername(String username);

    /**
     * 查看输入的验证问题是否正确
     * @param username
     * @param question
     * @param answer
     * @return
     */
    int checkAnswer(@Param("username") String username, @Param("question")String question,@Param("answer") String answer);

    int updatePasswordByUsername(@Param("username") String username,@Param("password") String password);

    int checkPassword(@Param("id") Integer id,@Param("password") String password);

    int insertSelective(User record);

    int updateByPrimaryKeySelective(User record);

    int checkEmailByUserId(@Param("id") Integer id,@Param("email") String email);

    User selectUserByToken(String token);

    int updateTokenByUserId(@Param("token") String token, @Param("id") Integer id);


}